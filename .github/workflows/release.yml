name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/guardrails

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service:
          - name: heuristics
            dockerfile: algorithms/heuristics/Dockerfile
            image: heuristics-guardrail
          - name: ml-model
            dockerfile: algorithms/ml_model/Dockerfile
            image: ml-guardrail
          - name: llm-guardrail
            dockerfile: algorithms/llm_guardrail/Dockerfile
            image: llm-guardrail
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -z "$PREV_TAG" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "Initial release" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s" $PREV_TAG..HEAD >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## üöÄ Release ${{ github.ref_name }}
            
            ### üì¶ Docker Images
            
            The following Docker images have been published to GitHub Container Registry:
            
            - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-heuristics-guardrail:${{ github.ref_name }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-ml-guardrail:${{ github.ref_name }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-llm-guardrail:${{ github.ref_name }}`
            
            ### üìù Changes
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### üîß Usage
            
            ```bash
            # Pull the images
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-heuristics-guardrail:${{ github.ref_name }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-ml-guardrail:${{ github.ref_name }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-llm-guardrail:${{ github.ref_name }}
            
            # Or use docker-compose
            export GUARDRAILS_VERSION=${{ github.ref_name }}
            docker compose up
            ```
          draft: false
          prerelease: false 