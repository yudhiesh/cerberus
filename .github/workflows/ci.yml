name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".gitignore"
      - "LICENSE"
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".gitignore"
      - "LICENSE"

env:
  PYTHON_VERSION: "3.12"
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"

      - name: Install pre-commit
        run: uv pip install --system pre-commit

      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Run pre-commit
        run: pre-commit run --all-files

  test-heuristics:
    name: Test Heuristics Service
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "algorithms/heuristics/pyproject.toml"

      - name: Install dependencies
        working-directory: algorithms/heuristics
        run: |
          uv venv
          uv sync
          cd ../../shared && uv pip install -e .

      - name: Run tests with coverage
        working-directory: algorithms/heuristics
        run: |
          uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: algorithms/heuristics/coverage.xml
          flags: heuristics
          name: heuristics-coverage

  test-ml-model:
    name: Test ML Model Service
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "algorithms/ml_model/pyproject.toml"

      - name: Install dependencies
        working-directory: algorithms/ml_model
        run: |
          uv venv
          uv sync
          cd ../../shared && uv pip install -e .

      - name: Run tests with coverage
        working-directory: algorithms/ml_model
        run: |
          uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: algorithms/ml_model/coverage.xml
          flags: ml-model
          name: ml-model-coverage

  test-llm-guardrail:
    name: Test LLM Guardrail Service
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "algorithms/llm_guardrail/pyproject.toml"

      - name: Install dependencies
        working-directory: algorithms/llm_guardrail
        run: |
          uv venv
          uv sync
          cd ../../shared && uv pip install -e .

      - name: Run tests with coverage
        working-directory: algorithms/llm_guardrail
        run: |
          uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: algorithms/llm_guardrail/coverage.xml
          flags: llm-guardrail
          name: llm-guardrail-coverage

  test-evaluation:
    name: Test Evaluation Framework
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "evaluation/pyproject.toml"

      - name: Install dependencies
        working-directory: evaluation
        run: |
          uv venv
          uv sync
          cd ../shared && uv pip install -e .

      - name: Run tests with coverage
        working-directory: evaluation
        run: |
          uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: evaluation/coverage.xml
          flags: evaluation
          name: evaluation-coverage

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-heuristics, test-ml-model, test-llm-guardrail]
    strategy:
      matrix:
        service:
          - name: heuristics
            dockerfile: algorithms/heuristics/Dockerfile
            image: guardrails-heuristics
          - name: ml-model
            dockerfile: algorithms/ml_model/Dockerfile
            image: guardrails-ml
          - name: llm-guardrail
            dockerfile: algorithms/llm_guardrail/Dockerfile
            image: guardrails-llm
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service.dockerfile }}
          tags: ${{ matrix.service.image }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v3

      - name: Install Bandit
        run: uv pip install --system bandit[toml]

      - name: Run Bandit security scan
        run: bandit -r algorithms/ evaluation/ shared/ -f json -o bandit-report.json

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker compose version

      - name: Start services
        run: |
          docker compose up -d
          sleep 10  # Wait for services to start

      - name: Check service health
        run: |
          curl -f http://localhost:8001/health || exit 1
          curl -f http://localhost:8002/health || exit 1
          curl -f http://localhost:8003/health || exit 1

      - name: Stop services
        if: always()
        run: docker compose down 